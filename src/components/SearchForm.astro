---
// Components
import TextInputSearch from "./form-components/TextInputSearch.astro";
import RegionPickerDesktop from "./form-components/RegionPickerDesktop.astro";
import DatePickerDesktop from "./form-components/DatePickerDesktop.astro";
import ReactButton from "./form-components/ReactButton.jsx";
// Constants
import { 
  searchFormDimensions, 
  generateCSSConstants, 
  searchFormFieldsData as fieldsData,
  research
} from "../styles/constants";
// Icons
import SearchIcon from "../../public/search.svg";

// Funzioni
const updateResearch = () => {
  const fieldsIds = fieldsData.forEach(f => {return f.id})
  console.log(fieldsIds)
}
---
<form style={generateCSSConstants(searchFormDimensions, "px")}>
  {fieldsData.map((fieldData, idx) => (
    <>
      <div class="field-container">
        <div id={fieldData.id} class={`field field-hover ${fieldData.id.includes("date") ? "small-field" : "large-field"}`}>
          <TextInputSearch label={fieldData.label} placeholder={fieldData.placeholder} />
          {fieldData.id === "guests" && (
            // <button type="button" id="btn-submit">
            //   <SearchIcon width={24} height={24} />
            //   <span class="btn-label">Cerca</span>
            // </button>
            <ReactButton
              id="btn-submit"
              label="Cerca"
              clickHandler={updateResearch}
            />
          )}
        </div>
        <div id={`${fieldData.id}-picker-wrapper`} class="wrapper hidden">
          {fieldData.id === "destination" && <RegionPickerDesktop />}
          {fieldData.id.includes("date") && <DatePickerDesktop containerName={fieldData.label} />}
          {fieldData.id === "guests" && <div>{/* Inserire qui il componente guests picker */}</div>}
        </div>
      </div>
      {idx < 3 && <div class="field-separator"></div>}
    </>
  ))}
</form>

  <script>
    // costanti per gli script sotto
    const fields = document.querySelectorAll("div.field");
    const form = document.querySelector("form") as HTMLFormElement;
    const button = document.getElementById("btn-submit") as HTMLButtonElement;
    const wrappers = document.querySelectorAll(".wrapper")
    const destinationPicker = document.getElementById("destination-picker-wrapper") as HTMLDivElement
    const checkInDatePicker = document.getElementById("check-in-date-picker-wrapper") as HTMLDivElement
    const checkOutDatePicker = document.getElementById("check-out-date-picker-wrapper") as HTMLDivElement
    // const guestsPicker = document.getElementById("guests-picker-wrapper") as HTMLDivElement
    const btnSubmit = document.getElementById("btn-submit") as HTMLButtonElement

    // ad ogni campo del form aggiungo un event listener
    // al click tutti i campi non cliccati e il form, acquisiscono la classe "inactive" che cambia il colore di sfondo,
    // mentre il campo cliccato acquisisce la classe "focused" e perde "field-hover"
    fields.forEach((field) => {
      field.addEventListener("click", (e) => {
        fields.forEach((f) => {
          f.classList.add("inactive", "field-hover");
          f.classList.remove("focused");
        });
        wrappers.forEach((w) => {
          w.classList.add("hidden")
        })
        form.classList.add("inactive");
        field.classList.remove("inactive", "field-hover");
        field.classList.add("focused");
        button.classList.add("wide");
        // VisibilitÃ  opzioni al click del campo
        if (field.id == "destination") destinationPicker.classList.remove("hidden")
        if (field.id == "check-in-date") checkInDatePicker.classList.remove("hidden")
        if (field.id == "check-out-date") checkOutDatePicker.classList.remove("hidden")
        // if (field.id == "guests") guestsPicker.classList.remove("hidden")
      });
    });
    // cliccando fuori dal form viene rimossa la classe "inactive" sia dai campi
    // che dal form, riportando lo sfondo bianco, e la classe "focused" da tutti i campi.
    // inoltre viene rimessa la classe "field-hover"
    document.addEventListener("click", (e) => {
      const target = e.target as Node;
      if (!form.contains(target)) {
        fields.forEach((f) => {
          f.classList.remove("inactive", "focused");
          f.classList.add("field-hover");
        });
        wrappers.forEach((w) => {
          w.classList.add("hidden")
        })
        form.classList.remove("inactive");
        button.classList.remove("wide");
      }
    });

    // Submit handler
    btnSubmit.addEventListener("click", () => {
   
    })
  </script>
</form>

<style>
  form {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    background-color: #ffffff;
    border-radius: var(--formBorderRadius);
    outline: solid 1px var(--textlightgraycolor);
    box-sizing: border-box;
    box-shadow: 2px 2px 10px 5px var(--grayhovercolor);
  }
  div.field-container {
    border-radius: inherit;
    display: flex;
    flex-direction: column;
  }
  form.inactive,
  .field.inactive {
    background-color: var(--bglighgraycolor);
  }
  .field {
    border-radius: inherit;
    background-color: #ffffff;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
  }
  .field.focused {
    box-shadow: 2px 0 2px 2px var(--grayhovercolor);
    z-index: 5;
  }
  .field-hover:hover {
    cursor: pointer;
    background-color: var(--grayhovercolor);
  }
  .large-field {
    width: var(--largeFieldW);
  }
  .small-field {
    width: var(--smallFieldW);
  }
  .field-separator {
    border-right: solid var(--separatorW) var(--grayhovercolor);
    height: var(--formBorderRadius);
  }
  button {
    background-color: var(--primarycolor);
    flex-shrink: 0;
    width: 50px;
    height: 50px;
    padding: 13px;
    margin: 0 12px;
    border-radius: 25px;
    border: none;
    color: #ffffff;
    transition: width 0.3s ease;
    overflow: hidden;
  }
  button span.btn-label {
    display: none;
  }
  button.wide {
    width: 110px;
    transition: width 0.3s ease;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    gap: 12px;
  }
  button.wide span.btn-label {
    display: inline;
    font-family: "Quicksand", sans-serif;
    font-size: 1.2em;
    font-weight: 600;
  }
  button:hover {
    filter: brightness(0.8);
    cursor: pointer;
  }

  .hidden {
    display: none;
  }

  @media screen and (max-width: 850px) {
    .large-field {
      width: var(--largeFieldTabletW);
    }
    .small-field {
      width: var(--smallFieldTabletW);
    }
  }
  @media screen and (max-width: 760px) {
    form {
      display: none;
    }
  }
</style>
